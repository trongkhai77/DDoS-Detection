from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import pandas as pd
import requests
import time
import os
import numpy as np
from datetime import datetime

# API endpoint
API_URL = "http://localhost:8000/predict_batch"
MERGED_FILE_PATH = "/home/khai/Desktop/merged_data/merged_traffic.csv"

class CSVHandler(FileSystemEventHandler):
    def __init__(self):
        self.last_modified = 0
        self.last_size = 0

    def on_modified(self, event):
        if event.src_path != MERGED_FILE_PATH:
            return

        # Th√™m m·ªôt kho·∫£ng delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o file ƒë√£ ƒë∆∞·ª£c ghi ho√†n t·∫•t
        time.sleep(0.5)

        try:
            current_size = os.path.getsize(MERGED_FILE_PATH)
            current_modified = os.path.getmtime(MERGED_FILE_PATH)
            
            # Ch·ªâ x·ª≠ l√Ω khi file th·ª±c s·ª± thay ƒë·ªïi
            if current_modified != self.last_modified and current_size != self.last_size:
                self.last_modified = current_modified
                self.last_size = current_size
                self.process_file()
        except OSError as e:
            print(f"L·ªói khi ki·ªÉm tra file: {e}")

    def process_file(self):
        try:
            print(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ƒêang x·ª≠ l√Ω d·ªØ li·ªáu m·ªõi...")
            
            # ƒê·∫£m b·∫£o file t·ªìn t·∫°i v√† kh√¥ng tr·ªëng
            if not os.path.exists(MERGED_FILE_PATH) or os.path.getsize(MERGED_FILE_PATH) == 0:
                print("File kh√¥ng t·ªìn t·∫°i ho·∫∑c tr·ªëng")
                return

            try:
                # ƒê·ªçc file v·ªõi on_bad_lines='skip' ƒë·ªÉ b·ªè qua c√°c d√≤ng l·ªói
                df = pd.read_csv(MERGED_FILE_PATH, on_bad_lines='skip')
            except pd.errors.EmptyDataError:
                print("File CSV tr·ªëng")
                return
            except Exception as e:
                print(f"L·ªói khi ƒë·ªçc file CSV: {e}")
                return

            if df.empty:
                print("Kh√¥ng c√≥ d·ªØ li·ªáu trong file")
                return

            print(f"ƒê√£ ƒë·ªçc ƒë∆∞·ª£c {len(df)} b·∫£n ghi")

            # X·ª≠ l√Ω d·ªØ li·ªáu
            protocol_mapping = {
                'ICMP': 1,
                'TCP': 6,
                'UDP': 17,
                'LLDP': 2,
                'ARP': 3,
                'ICMPv6': 4,
                'MDNS': 5,
                'Unknown': 0
            }
            
            # Chuy·ªÉn ƒë·ªïi Protocol v√† x·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
            df['Destination'] = df['Destination'].map(protocol_mapping).fillna(0).astype(int) #Protocol
            
            # Chuy·ªÉn ƒë·ªïi Length v√† x·ª≠ l√Ω c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá
            df['Protocol'] = pd.to_numeric(df['Protocol'], errors='coerce').fillna(0).astype(int) #Lenght
            
            # Chuy·ªÉn ƒë·ªïi Time
            df['No.'] = pd.to_numeric(df['No.'], errors='coerce').fillna(0) #Time

            # Chu·∫©n b·ªã d·ªØ li·ªáu cho API
            data = [{
                'Time': float(row['No.']),
                'Protocol': int(row['Destination']),
                'Length': int(row['Protocol'])
            } for index, row in df.iterrows()]

            print(f"G·ª≠i {len(data)} b·∫£n ghi l√™n API...")

            # G·ª≠i request t·ªõi API
            try:
                response = requests.post(API_URL, json=data, timeout=10)
                
                print(f"Status Code: {response.status_code}")
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('status') == 'ƒêang b·ªã t·∫•n c√¥ng DDoS':
                        print("\nüö® C·∫¢NH B√ÅO: Ph√°t hi·ªán t·∫•n c√¥ng DDoS! üö®")
                        print(f"Chi ti·∫øt: {result.get('details', 'Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt')}")
                    else:
                        print("\n‚úÖ H·ªá th·ªëng an to√†n, kh√¥ng ph√°t hi·ªán t·∫•n c√¥ng.")
                else:
                    print(f"\n‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu l√™n API: HTTP {response.status_code}")
                    print(f"Chi ti·∫øt l·ªói: {response.text}")
                    
            except requests.exceptions.RequestException as e:
                print(f"\n‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn API: {e}")
                
        except Exception as e:
            print(f"\n‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            import traceback
            print(traceback.format_exc())

def main():
    print(f"Starting DDoS Detection Monitor...")
    print(f"Monitoring file: {MERGED_FILE_PATH}")
    print("Waiting for file updates...")

    # T·∫°o th∆∞ m·ª•c cha n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs(os.path.dirname(MERGED_FILE_PATH), exist_ok=True)

    event_handler = CSVHandler()
    observer = Observer()
    observer.schedule(event_handler, path=os.path.dirname(MERGED_FILE_PATH), recursive=False)
    
    try:
        observer.start()
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nStopping monitor...")
        observer.stop()
    except Exception as e:
        print(f"Error: {e}")
        observer.stop()
    finally:
        observer.join()

if __name__ == "__main__":
    main()
